#!/bin/bash --login

#SBATCH --time=03:00:00      
#SBATCH --ntasks=1           
#SBATCH --cpus-per-task=16  
#SBATCH --mem=32G   
#SBATCH --job-name  renameReads
#SBACTH -A shade-cole-bonito

cd ${SLURM_SUBMIT_DIR}
cores="$SLURM_CPUS_PER_TASK"
RAM="$SLURM_MEM_PER_NODE"

# rename files starting by finding the files based on filename, cleaning it and 
# then changing the read header to the corresonding file name.
# | sed 's/_R1.fastq//'
echo -e "\n==== Paths, variables, links ====\n"
echo -e "mkdir /mnt/home/benucci/Amplicon-PacBio/labeled"
mkdir /mnt/home/benucci/Amplicon-PacBio/labeled
echo -e "cp /mnt/home/benucci/Amplicon-PacBio/stripped/*_trim.fastq /mnt/home/benucci/Amplicon-PacBio/labeled/"
cp /mnt/home/benucci/Amplicon-PacBio/stripped/*_trim.fastq /mnt/home/benucci/Amplicon-PacBio/labeled/
echo -e "cd /mnt/home/benucci/Amplicon-PacBio/labeled/"
cd /mnt/home/benucci/Amplicon-PacBio/labeled/

echo -e "\n========= Rename reads =========\n"
find . -type f -name '*_trim.fastq' | while read FILE ; 
    do
    newfile="$(echo ${FILE} | sed '0,/_/s///' | cut -f 1 -d '_')" ;
    mv "${FILE}" "${newfile}_rn.fastq" ;
done 

for file in `ls *_rn.fastq` ;
   do
   awk '/^@m64120/{print "@'${file//_rn.fastq/}'." ++i; next}{print}' < $file >> "${file//MMPRNT/mmprnt}" ;
done

echo -e "\n====== Sbatch log ========\n"
scontrol show job $SLURM_JOB_ID 
cp /mnt/home/benucci/Amplicon-PacBio/pipeline/slurm* \
/mnt/home/benucci/Amplicon-PacBio/stats/readRename.slurm
#rm /mnt/home/benucci/Amplicon-PacBio/pipeline/slurm*

# NOTE. The sed code is meant to replace the first _ with nothing. Useful first occurrence matching!
