#!/bin/bash --login

#SBATCH --time=00:59:00 
#SBATCH --nodes=1       
#SBATCH --ntasks=1 
#SBATCH --cpus-per-task=64
#SBATCH --mem-per-cpu=4G  
#SBATCH --job-name archive
#SBACTH -A shade-cole-bonito

cd ${SLURM_SUBMIT_DIR}
cores="$SLURM_CPUS_PER_TASK"
RAM_CPU="$SLURM_MEM_PER_CPU"

echo -e "\n========== Project paths ==========\n"
source config.yaml

echo -e "\n========== Sub-directories ==========\n"

echo -e "mkdir $project_dir/outputs/02_stripped"
mkdir $project_dir/outputs/02_stripped
echo -e "cp $project_dir/output/01_data_fastq/*.fastq /$project_dir/output/02_stripped/"
cp $project_dir/output/01_data_fastq/*.fastq /$project_dir/output/02_stripped/
echo -e "cd /$project_dir/output/02_stripped/"
cd /$project_dir/output/02_stripped/

echo -e "\n========= Cutadapt ========\n"
# Since a first round of cutadapt shoed that these PacBio reads are 
# a mixture of forward and reverse. In a multi-plexed environment, the output
# is a single consensus sequence for each barcoded amplicon sequence on 
# a per-ZMW bases (one consensus sequence saved per-ZMW). The orientation 
# of the [barcoded] ccs reads will be both forward and reverse and are 
# amenable to PCR primer-trimming.  

conda activate cutadapt
echo -e "cutadapt version: `cutadapt --version`" 

for file in `ls *.fastq`
do cutadapt \
	-g $fwd_primer -a $rev_primer_RC \
	-e 0.1 \
	--cores=$cores \
	--match-read-wildcards \
	--revcomp \
	--action lowercase \
	--discard-untrimmed \
	-o ${file//.fastq/_rc.fastq} $file
done

for file in `ls *_rc.fastq`
do cutadapt \
	-g $fwd_primer -a $rev_primer_RC \
	-e 0.1 \
	--cores=$cores \
	--match-read-wildcards \
	-o ${file//_rc.fastq/_trim.fastq} $file
done
conda deactivate

# cutadapt -n Repeat the adapter finding and removal step up to COUNT times. At least 2 if you have 2 primers.
# cutadapt -e expected error rate (default 10%).
# cutadapt --discard-untrimmed discards the pair if one of the reads does not contain an adapter
# cutadapt --match-read-wildcards All IUPAC nucleotide codes (wildcard characters in the read) are suppported. Wildcards in the adapter are allowed by default
echo -e "\n====== Read counts =====\n"
for fastq in *_trim.fastq                                                                           
	do echo -e "$fastq\t`grep -c "^+$" $fastq`" 
done > /$project_dir/output/02_stripped/stripped.counts

sed -i '1i Name\tCounts' /$project_dir/output/02_stripped/stripped.counts

echo -e "\n========== Sbatch log ==========\n"
echo -e "\n Current directory: `pwd` \n"
echo -e "\n `sacct -u benucci -j $SLURM_JOB_ID --format=JobID,JobName,Start,End,Elapsed,NCPUS` \n"
scontrol show job $SLURM_JOB_ID
cp $project_dir/code/slurm* $project_dir/slurms/03_strippingPrimers-cutadapt.slurm
rm $project_dir/code/slurm*
